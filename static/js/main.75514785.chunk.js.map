{"version":3,"sources":["components/SearchBox.js","components/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","props","change","value","click","className","type","placeholder","onChange","onClick","data","App","state","location","country","weather_description","icon","currentTemp","realFeel","maxTemp","minTemp","wind","humidity","pressure","sunrise","sunset","getUnixTime","time","converted","Date","hours","getHours","minutes","getMinutes","startFunction","fetch","then","res","json","result","setState","name","sys","weather","description","Math","round","main","temp","feels_like","temp_min","temp_max","speed","catch","error","console","log","getWeather","handleChange","e","target","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","setClass","this","faThermometerQuarter","faWind","faTint","faTachometerAlt","faSun","faMoon","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75514785.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = (props) => {\r\n    const {change, value, click} = props;\r\n    return (\r\n        <div className=\"search-box\">\r\n            <input \r\n            className=\"search-bar\"\r\n            type=\"text\"\r\n            placeholder=\"Wyszukaj miasto...\"\r\n            onChange={change}\r\n            value={value}\r\n            />\r\n            <button onClick={click}>Szukaj</button>\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport SearchBox from './SearchBox';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faThermometerQuarter, faWind, faTint, faSun, faMoon, faTachometerAlt} from \"@fortawesome/free-solid-svg-icons\";\n\nconst data = {\n  key: \"113a8dda29cb89a8ee722228a136271a\"\n}\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    location: '',\n    country: '',\n    weather_description: '',\n    icon: '',\n    currentTemp: '',\n    realFeel: '',\n    maxTemp: '',\n    minTemp: '',\n    wind: '',\n    humidity: '',\n    pressure: '',\n    sunrise: '',\n    sunset: '',\n  }\n\n  getUnixTime = (time) => {\n    let converted = new Date(time * 1000);\n    let hours = converted.getHours();\n    let minutes = converted.getMinutes();\n    return `${hours}:${minutes}`;\n  }\n\n  startFunction = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=Warsaw&units=metric&appid=${data.key}&lang=pl`)\n    .then(res => res.json())\n    .then(result => {\n      this.setState({\n        location: result.name,\n        country: result.sys.country,\n        weather_description: result.weather[0].description,\n        currentTemp: Math.round(result.main.temp),\n        realFeel: Math.round(result.main.feels_like),\n        minTemp: Math.round(result.main.temp_min),\n        maxTemp: Math.round(result.main.temp_max),\n        wind: Math.round(result.wind.speed),\n        humidity: Math.round(result.main.humidity),\n        pressure: result.main.pressure,\n        sunrise: result.sys.sunrise,\n        sunset: result.sys.sunset\n      })\n    })\n    .catch(error => console.log(error));\n}\n\n  getWeather = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&units=metric&appid=${data.key}&lang=pl`)\n      .then(res => res.json())\n      .then(result => {\n        this.setState({\n          location: result.name,\n          country: result.sys.country,\n          weather_description: result.weather[0].description,\n          currentTemp: Math.round(result.main.temp),\n          minTemp: Math.round(result.main.temp_min),\n          maxTemp: Math.round(result.main.temp_max),\n          wind: Math.round(result.wind.speed),\n          realFeel: Math.round(result.main.feels_like),\n          humidity: Math.round(result.main.humidity),\n          pressure: result.main.pressure,\n          sunrise: result.sys.sunrise,\n          sunset: result.sys.sunset\n        })\n      })\n      .catch(error => console.log(error));\n  } \n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  dateBuilder = (d) => {\n    let days = [\"Niedziela\", \"Poniedziałek\", \"Wtorek\", \"Środa\", \"Czwartek\", \"Piątek\", \"Sobota\"];\n    let months = [\"Styczeń\", \"Luty\", \"Marzec\", \"Kwiecień\", \"Maj\", \"Czerwiec\", \"Lipiec\", \"Sierpień\", \"Wrzesień\", \"Październik\", \"Listopad\", \"Grudzień\"]\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day}, ${date} ${month} ${year}`;\n  }\n\n  componentDidMount() {\n    this.startFunction();\n  }\n\n  componentWillUnmount() {\n    console.log(\"Koniec\");\n  }\n\n  setClass = () => {\n    if(this.state.currentTemp <= 0) {\n      return 'app cold';\n    } else if(this.state.currentTemp > 0 && this.state.currentTemp <= 20) {\n      return 'app mid';\n    } else if(this.state.currentTemp > 20) {\n      return 'app warm';\n    }\n  }\n\n  render() { \n    return ( \n      <div className={this.setClass()}>\n      <main>\n        <SearchBox\n        change={this.handleChange}\n        value={this.state.value}\n        click={this.getWeather}\n        />\n          <>\n          <div className=\"weather-box\">\n            <div className=\"status\">\n           {this.state.weather_description}\n            </div>\n          <div className=\"location\">{this.state.location}, {this.state.country}</div>\n          <div className=\"date\">{this.dateBuilder(new Date())}</div>\n          <div className=\"temp\">\n            <div className=\"current\">\n              {this.state.currentTemp}°\n            </div>\n            <div className=\"min-max\">\n              <div className=\"max\">\n                {this.state.maxTemp}°C\n              </div>\n              <div className=\"min\">\n                {this.state.minTemp}°C\n              </div>\n            </div>\n          </div> \n        </div>\n        <div className=\"additional-info\">\n          <div className=\"intro\">\n            <p>Szczegóły</p>\n            <div className=\"line\"></div>\n          </div>\n          <div className=\"blocks\">\n            <div className=\"info\">\n              <FontAwesomeIcon className=\"icon\" icon={faThermometerQuarter}></FontAwesomeIcon>\n              <p className=\"stat\">Odczuwalna</p>\n              <strong>{this.state.wind}°C</strong>\n            </div>\n            <div className=\"info\">\n              <FontAwesomeIcon className=\"icon\" icon={faWind}></FontAwesomeIcon>\n              <p className=\"stat\">Wiatr</p>\n              <strong>{this.state.wind}km/h</strong>\n            </div>\n            <div className=\"info\">\n              <FontAwesomeIcon className=\"icon\" icon={faTint}></FontAwesomeIcon>\n              <p className=\"stat\">Wilgotność</p>\n              <strong>{this.state.humidity}%</strong>\n            </div>\n            <div className=\"info\">\n              <FontAwesomeIcon className=\"icon\" icon={faTachometerAlt}></FontAwesomeIcon>\n              <p className=\"stat\">Ciśnienie</p>\n              <strong>{this.state.pressure} hPa</strong>\n            </div>\n            <div className=\"info\">\n              <FontAwesomeIcon className=\"icon\" icon={faSun}></FontAwesomeIcon>\n              <p className=\"stat\">Wschód</p>\n              <strong>{this.getUnixTime(this.state.sunrise)}</strong>\n            </div>\n            <div className=\"info\">\n              <FontAwesomeIcon className=\"icon\" icon={faMoon}></FontAwesomeIcon>\n              <p className=\"stat\">Zachód</p>\n              <strong>{this.getUnixTime(this.state.sunset)}</strong>\n            </div>\n          </div>  \n        </div>\n        </>        \n      </main> \n      </div>\n    );\n  }\n}\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}